***Read up on projections in mongoDB "project fields from query results"
Models:

  CURRENT MODELLING:

    Player
      name: string
      preferred position: string , optional

    Game
      time: Date
      location: Object{
        club/city: string
        field: string
      }
      player_status {Object}[] //no object array in javascript?
        {
          player_name: string,
          status: string //starting, benched, undecided
        }

    DRILL (STRETCH)
      drill_name: string
      time: datetime
    
    Team (stretch)
      teamName: string , min 2 chars
      players: Player[]

Views:
  Global?
    Nav Bar - make this float
  Team List
    list of players
    add a player - could be a better testbed for making an element snap/unsnap based on scrolling
  Game Page
    //Split this component:
      TeamGameComp
        -GameNewComp
        -GameDisplayComp
    Functionality:
      Add Game
      Game Selection (game 1, game 2, etc.)
      player list per game
        status for each player per game: Starting, Benched, Undecided
          No more than max # players Starting! (flex)
    Methods: //delete this once you have it in code!!!!
      getGames() //get list of all games
      getPlayers() //get list of players, might pull this data from parent component
      selectGame() //set currentGame variable
      addGame(datetime, club, field)
        //create new game
        //for each player, add the game to their status list, set status to "undecided"
        //update gameList!
      changeStatus(player, status) //alter player status, match by currentGame
    Variables: //delete this once you have it in code!!!
      playerList: Player[] //might pull this from parent
      gameList: Game[]
      currentGame: Game //used to select what info to display


Desired Features:

  Put these in a test component to start:
    pop an element of the DOM and make it float when it would scroll offscreen
      try doing this with an image
    Do the same for a small element (button) without disturbing it's neighbors
    incorporate streaming video
      replace above image with video

  Stretch goals:
    incorporate login/reg and session
    include drill performance via timed completion

Player status in game feels needlessly complicated -_-
So, with current modelling:
  New Game:
    create Game object, send to server
    construct array of player_status objects
    set Game.player_status, send to DB
    pass new game back to client on success
  Delete Game:
    toss in trash, live the good life
  New Player:
    create Player object, send to server
    save Player to DB
    //can we do the below after sending a response to the user?
    //would be nice.
    construct array of games and a player_status object
    add player_status object to each Game in array
    update games in DB
  Delete Player:
    send Player id to server
    retrieve Player from DB
    construct array of games
    remove player_status entries where Player matches
    save games

Big Ugly To Do List:
  oh my goodness put proper validations in please.
  make all html look less like garbage
  add cross-browser support on datetime field for new game from
    handy-dandy notebook: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local
  also standardize times, convert to local for client.
    further reading required